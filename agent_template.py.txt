import sys
import os
import time
import logging
import socket
import json
import subprocess
import requests
import tempfile
import threading

import servicemanager
import win32serviceutil
import win32service
import win32event
import pywintypes

# --- Konfiguracja wstrzykiwana ---
API_ENDPOINTS = [ep.strip() for ep in ["__API_ENDPOINT_1__", "__API_ENDPOINT_2__"] if ep and ep.strip()]
API_KEY = "__API_KEY__"
LOOP_INTERVAL = int("__LOOP_INTERVAL__")
REPORT_INTERVAL = int("__REPORT_INTERVAL__")
WINGET_PATH_CONF = r"__WINGET_PATH__"

# --- Klasy logiki ---

class CommandRunner:
    @staticmethod
    def run(command: str):
        try:
            full_command = f"$ProgressPreference = 'SilentlyContinue'; [System.Threading.Thread]::CurrentThread.CurrentUICulture = 'en-US'; {command}"
            result = subprocess.run(
                ["powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command", full_command],
                capture_output=True, text=True, encoding='utf-8', errors='ignore',
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            return result
        except Exception as e:
            logging.error(f"Krytyczny błąd wykonania polecenia: {command}\n{e}")
            return None

class NotificationManager:
    """Zarządza tworzeniem i wyświetlaniem powiadomień Toast w sesji użytkownika."""

    @staticmethod
    def _get_ipc_path(task_id, action):
        ipc_dir = os.path.join(os.environ.get("ProgramData", "C:/ProgramData"), "WingetAgent", "ipc")
        os.makedirs(ipc_dir, exist_ok=True)
        return os.path.join(ipc_dir, f"{task_id}.{action}")

    @staticmethod
    def _run_ps_as_user(ps_script_content):
        """
        Tworzy i natychmiast uruchamia jednorazowe zadanie w Harmonogramie Zadań,
        aby wykonać skrypt PowerShell w kontekście aktywnego zalogowanego użytkownika.
        To najbardziej niezawodny sposób na wyświetlenie UI z poziomu usługi systemowej.
        """
        try:
            # Znajdź aktywnego użytkownika
            output = CommandRunner.run("Get-CimInstance -ClassName Win32_ComputerSystem | Select-Object -ExpandProperty UserName").stdout.strip()
            if not output:
                logging.warning("Nie można znaleźć aktywnego użytkownika do wyświetlenia powiadomienia.")
                return

            active_user = output

            # Unikalna nazwa dla plików i zadania
            unique_id = f"toast_{os.getpid()}_{int(time.time())}"
            script_path = os.path.join(tempfile.gettempdir(), f"{unique_id}.ps1")
            task_name = f"WingetAgent_{unique_id}"

            with open(script_path, "w", encoding="utf-8") as f:
                f.write(ps_script_content)

            # Tworzy zadanie, które uruchamia się natychmiast i usuwa się po 30 sekundach
            command = f"""
            $action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-ExecutionPolicy Bypass -File '{script_path}'"
            $principal = New-ScheduledTaskPrincipal -UserId '{active_user}' -LogonType Interactive
            $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -DeleteExpiredTaskAfter (New-TimeSpan -Seconds 30)
            Register-ScheduledTask -TaskName "{task_name}" -Action $action -Principal $principal -Settings $settings -Force
            Start-ScheduledTask -TaskName "{task_name}"
            """
            CommandRunner.run(command)
            logging.info(f"Zlecono wykonanie zadania '{task_name}' dla powiadomienia.")
        except Exception as e:
            logging.error(f"Nie udało się uruchomić skryptu jako użytkownik: {e}")

    @classmethod
    def show_request_notification(cls, task_id, app_name, action_type):
        title = f"Prośba o {action_type}"
        message = f"Dział IT prosi o {action_type} aplikacji '{app_name}'. Wybierz jedną z opcji."

        # Tworzymy skrypty, które utworzą pliki flagowe po kliknięciu przycisku
        now_script_path = os.path.join(tempfile.gettempdir(), f"{task_id}_now.ps1").replace("\\", "\\\\")
        with open(now_script_path, "w") as f: f.write(f"New-Item -Path '{cls._get_ipc_path(task_id, 'now')}' -ItemType File -Force | Out-Null")

        shutdown_script_path = os.path.join(tempfile.gettempdir(), f"{task_id}_shutdown.ps1").replace("\\", "\\\\")
        with open(shutdown_script_path, "w") as f: f.write(f"New-Item -Path '{cls._get_ipc_path(task_id, 'shutdown')}' -ItemType File -Force | Out-Null")

        buttons_xml = f"""
        <action content='Uruchom teraz' arguments='powershell.exe -ExecutionPolicy Bypass -File \\"{now_script_path}\\"' activationType='protocol'/>
        <action content='Przy zamknięciu systemu' arguments='powershell.exe -ExecutionPolicy Bypass -File \\"{shutdown_script_path}\\"' activationType='protocol'/>
        """

        # Unikamy problemów z cudzysłowami w XML przez użycie pojedynczych
        buttons_xml_escaped = buttons_xml.replace('"', "'")

        script_content = f"""
        [Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] > $null
        [Windows.Data.Xml.Dom.XmlDocument, Windows.Data.Xml.Dom.XmlDocument, ContentType = WindowsRuntime] > $null
        $template = "<toast launch='app-defined-string'><visual><binding template='ToastGeneric'><text>{title}</text><text>{message}</text></binding></visual><actions>{buttons_xml_escaped}</actions></toast>"
        $xml = New-Object Windows.Data.Xml.Dom.XmlDocument; $xml.LoadXml($template)
        $toast = New-Object Windows.UI.Notifications.ToastNotification $xml
        [Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier("Winget Dashboard").Show($toast)
        """
        cls._run_ps_as_user(script_content)

    @classmethod
    def show_manual_action_notification(cls, app_name, action_type):
        title = f"Automatyzacja nie powiodła się"
        message = f"Automatyczna {action_type} aplikacji '{app_name}' nie powiodła się. Prosimy o ręczne wykonanie tej operacji."

        # Przycisk bezpośrednio uruchamia aplet panelu sterowania
        buttons_xml = "<action content='Otwórz \\'Dodaj lub usuń programy\\'' arguments='control.exe' arguments='appwiz.cpl' activationType='protocol'/>"
        buttons_xml_escaped = buttons_xml.replace('"', "'")

        script_content = f"""
        [Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] > $null
        [Windows.Data.Xml.Dom.XmlDocument, Windows.Data.Xml.Dom.XmlDocument, ContentType = WindowsRuntime] > $null
        $template = "<toast launch='app-defined-string'><visual><binding template='ToastGeneric'><text>{title}</text><text>{message}</text></binding></visual><actions>{buttons_xml_escaped}</actions></toast>"
        $xml = New-Object Windows.Data.Xml.Dom.XmlDocument; $xml.LoadXml($template)
        $toast = New-Object Windows.UI.Notifications.ToastNotification $xml
        [Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier("Winget Dashboard").Show($toast)
        """
        cls._run_ps_as_user(script_content)


class ApiClient:
    def __init__(self, endpoints, api_key):
        self.endpoints = endpoints
        self.headers = {'X-API-Key': api_key, 'Content-Type': 'application/json'}
    def _request(self, method, path, **kwargs):
        for endpoint in self.endpoints:
            url = f"{endpoint}{path}"
            try:
                response = requests.request(method, url, headers=self.headers, timeout=15, **kwargs)
                response.raise_for_status()
                return response
            except requests.RequestException as e:
                logging.warning(f"Błąd komunikacji z {url}: {e}")
        raise ConnectionError("Nie udało się połączyć z żadnym z serwerów API.")
    def get_blacklist(self, hostname): return self._request('get', f'/api/settings/blacklist/{hostname}').json()
    def send_report(self, data): self._request('post', '/api/report', data=json.dumps(data))
    def get_tasks(self, hostname): return self._request('get', f'/api/tasks/{hostname}').json()
    def send_task_result(self, task_id, status, details=None):
        payload = {'task_id': task_id, 'status': status, 'details': details}
        self._request('post', '/api/tasks/result', data=json.dumps(payload))

class WingetManager:
    def __init__(self, winget_path_conf):
        self.winget_path = self._find_winget_path(winget_path_conf)
        if not self.winget_path:
            logging.error("KRYTYCZNY BŁĄD: Nie można zlokalizować pliku winget.exe na tym komputerze.")
        else:
            logging.info(f"Używana ścieżka do winget: {self.winget_path}")

    def _find_winget_path(self, winget_path_conf):
        if winget_path_conf and os.path.isfile(winget_path_conf):
            return winget_path_conf
        try:
            user_root = os.path.expandvars(r"C:\\Users")
            if os.path.isdir(user_root):
                for username in os.listdir(user_root):
                    winapps_path = os.path.join(user_root, username, "AppData", "Local", "Microsoft", "WindowsApps", "winget.exe")
                    if os.path.isfile(winapps_path):
                        return winapps_path
        except Exception as e:
            logging.warning(f"Nie udało się przeszukać folderów użytkowników: {e}")
        logging.warning("Nie znaleziono winget.exe w profilach użytkowników, próba użycia domyślnej ścieżki PATH.")
        return "winget"

    def _run_winget(self, args):
        if not self.winget_path: return None
        command = f'& "{self.winget_path}" {args} --accept-source-agreements --disable-interactivity'
        return CommandRunner.run(command)

    def _parse_winget_output(self, result_obj):
        if not result_obj or not hasattr(result_obj, 'stdout'): return []
        apps, header_line, header_indices = [], "", {}
        output_str = result_obj.stdout
        for line in output_str.strip().split('\n'):
            if 'Name' in line and 'Id' in line and 'Version' in line:
                header_line = line
                try:
                    header_indices['name_end'] = header_line.index("Id")
                    header_indices['id_end'] = header_line.index("Version")
                    header_indices['version_end'] = header_line.index("Available") if "Available" in header_line else len(header_line)
                except ValueError: continue
                continue
            if not header_indices or line.startswith('---') or not line.strip(): continue
            try:
                name = line[:header_indices['name_end']].strip()
                app_id = line[header_indices['name_end']:header_indices['id_end']].strip()
                version = line[header_indices['id_end']:header_indices['version_end']].strip()
                app = {"name": name, "id": app_id, "version": version}
                if "Available" in header_line: app["available_version"] = line[header_indices['version_end']:].strip()
                if app['name'] and app['id']: apps.append(app)
            except (ValueError, IndexError) as e:
                logging.warning(f"Pominięto linię winget podczas parsowania: {line} | Błąd: {e}")
        logging.info(f"Sparowano {len(apps)} wpisów.")
        return apps

    def get_installed_apps(self, blacklist):
        result = self._run_winget('list')
        if not result or result.returncode != 0:
            logging.error(f"Nie udało się pobrać listy aplikacji. Kod: {result.returncode if result else 'N/A'}")
            return []
        all_apps = self._parse_winget_output(result)
        filtered = [app for app in all_apps if not any(keyword.lower() in app['name'].lower() for keyword in blacklist)]
        logging.info(f"Znaleziono {len(all_apps)} aplikacji, po filtrowaniu: {len(filtered)}.")
        return filtered

    def get_available_updates(self):
        result = self._run_winget('upgrade')
        if not result or result.returncode != 0:
            return []
        return self._parse_winget_output(result)

    def execute_task(self, command, payload):
        result = None
        if command == 'update_package':
            result = self._run_winget(f'upgrade --id "{payload}" --silent --force --accept-package-agreements')
        elif command == 'uninstall_package':
            result = self._run_winget(f'uninstall --id "{payload}" --silent --accept-package-agreements')

        if not result:
            return None # Zwracamy None, aby odróżnić od niepowodzenia

        if result.returncode == 0:
             return result # Sukces

        # Sprawdź, czy mimo kodu błędu, instalacja się powiodła
        if command == 'update_package' and ("Successfully installed" in result.stdout or "successfully installed" in result.stderr):
            logging.info(f"Wykryto pomyślną aktualizację dla '{payload}' mimo kodu wyjścia {result.returncode}.")
            return result

        logging.error(f"Zadanie '{command}' dla '{payload}' nie powiodło się. Kod: {result.returncode}\nSTDOUT: {result.stdout}\nSTDERR: {result.stderr}")
        return result # Zwracamy obiekt result, nawet przy błędzie


class SystemInfo:
    @staticmethod
    def get_hostname(): return socket.gethostname()
    @staticmethod
    def get_active_ip():
        try: s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM); s.connect(("8.8.8.8", 80)); ip = s.getsockname()[0]; s.close(); return ip
        except Exception: return "127.0.0.1"
    @staticmethod
    def is_reboot_required():
        result = CommandRunner.run("(New-Object -ComObject Microsoft.Update.SystemInfo).RebootRequired")
        return result and "true" in result.stdout.lower()

    @staticmethod
    def get_pending_os_updates():
        logging.info("Sprawdzanie aktualizacji systemu Windows...")
        command = """
        try {
            (New-Object -ComObject Microsoft.Update.Session).CreateUpdateSearcher().Search("IsInstalled=0 and Type='Software' and IsHidden=0").Updates |
            Select-Object Title, @{Name='KB';Expression={$_.KBArticleIDs -join ', '}} |
            ConvertTo-Json -Depth 3
        } catch { '[]' }
        """
        result = CommandRunner.run(command)
        if not result or not result.stdout: return []
        try:
            updates = json.loads(result.stdout)
            if isinstance(updates, dict): return [updates]
            return updates if isinstance(updates, list) else []
        except json.JSONDecodeError:
            logging.error("Błąd dekodowania JSON z Windows Updates.")
            return []

class Agent:
    def __init__(self):
        self.hostname = SystemInfo.get_hostname()
        self.api_client = ApiClient(API_ENDPOINTS, API_KEY)
        self.winget_manager = WingetManager(WINGET_PATH_CONF)
        self.blacklist = []
        self.last_report_time = 0

    def run_full_report(self):
        logging.info("Rozpoczynanie pełnego raportu...")
        try:
            self.blacklist = self.api_client.get_blacklist(self.hostname)
            report_data = {
                "hostname": self.hostname, "ip_address": SystemInfo.get_active_ip(),
                "reboot_required": SystemInfo.is_reboot_required(),
                "installed_apps": self.winget_manager.get_installed_apps(self.blacklist),
                "available_app_updates": self.winget_manager.get_available_updates(),
                "pending_os_updates": SystemInfo.get_pending_os_updates()
            }
            self.api_client.send_report(report_data)
            self.last_report_time = time.time()
            logging.info("Pełny raport wysłany pomyślnie.")
        except Exception as e:
            logging.error(f"Błąd krytyczny podczas wysyłania raportu: {e}", exc_info=True)

    def _schedule_task_on_shutdown(self, task_id, base_command, payload):
        logging.info(f"Tworzenie zadania w harmonogramie dla zadania {task_id} przy wylogowaniu.")
        actual_command = base_command.replace("request_", "")
        ps_command = f"& '{self.winget_manager.winget_path}' {actual_command} --id '{payload}' --silent --accept-package-agreements; Remove-ScheduledTask -TaskName 'WingetAgentTask_{task_id}' -Confirm:$false"
        escaped_ps_command = ps_command.replace('"', '`"')

        script = f"""
        $action = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument '-NoProfile -WindowStyle Hidden -Command "{escaped_ps_command}"'
        $trigger = New-ScheduledTaskTrigger -AtLogOff
        $principal = New-ScheduledTaskPrincipal -UserId "NT AUTHORITY\\SYSTEM" -RunLevel Highest
        $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries
        $taskName = "WingetAgentTask_{task_id}"
        Register-ScheduledTask -TaskName $taskName -Action $action -Trigger $trigger -Principal $principal -Settings $settings -Description "Zadanie Winget Dashboard" -Force
        """
        result = CommandRunner.run(script)
        if result.returncode == 0:
            self.api_client.send_task_result(task_id, 'zaplanowane_na_zamkniecie')
        else:
            self.api_client.send_task_result(task_id, 'błąd', result.stderr)

    def _perform_winget_action(self, task_id, base_command, payload):
        self.api_client.send_task_result(task_id, 'w_trakcie_wykonywania')
        actual_command = base_command.replace("request_", "")
        result = self.winget_manager.execute_task(actual_command, payload)

        if result and result.returncode == 0:
            self.api_client.send_task_result(task_id, 'zakończone')
        else:
            error_details = f"Kod wyjścia: {result.returncode if result else 'N/A'}\n\nSTDOUT:\n{result.stdout if result else ''}\n\nSTDERR:\n{result.stderr if result else ''}"
            self.api_client.send_task_result(task_id, 'niepowodzenie_interwencja_uzytkownika', error_details)
            action_type = "deinstalacja" if "uninstall" in actual_command else "aktualizacja"
            NotificationManager.show_manual_action_notification(payload, action_type)

    def _handle_interactive_task(self, task):
        task_id, command, payload = task['id'], task['command'], task['payload']
        app_name = payload
        action_type = "deinstalacji" if "uninstall" in command else "aktualizacji"

        self.api_client.send_task_result(task_id, 'oczekuje_na_uzytkownika')
        NotificationManager.show_request_notification(task_id, app_name, action_type)

        timeout = time.time() + 3600 # Czekaj maksymalnie godzinę na decyzję
        logging.info(f"Agent czeka na odpowiedź użytkownika dla zadania {task_id}...")
        while time.time() < timeout:
            now_path = NotificationManager._get_ipc_path(task_id, 'now')
            shutdown_path = NotificationManager._get_ipc_path(task_id, 'shutdown')

            if os.path.exists(now_path):
                try: os.remove(now_path)
                except OSError: pass
                logging.info(f"Użytkownik wybrał 'Uruchom teraz' dla zadania {task_id}.")
                self._perform_winget_action(task_id, command, payload)
                return

            if os.path.exists(shutdown_path):
                try: os.remove(shutdown_path)
                except OSError: pass
                logging.info(f"Użytkownik wybrał 'Przy zamknięciu systemu' dla zadania {task_id}.")
                self._schedule_task_on_shutdown(task_id, command, payload)
                return

            time.sleep(5)

        logging.warning(f"Przekroczono limit czasu na odpowiedź użytkownika dla zadania {task_id}.")
        self.api_client.send_task_result(task_id, 'błąd', 'Przekroczono limit czasu na odpowiedź użytkownika.')

    def check_and_execute_tasks(self):
        logging.info("Sprawdzanie dostępności zadań...")
        try:
            tasks = self.api_client.get_tasks(self.hostname)
            if not tasks:
                logging.info("Brak nowych zadań.")
                return
            for task in tasks:
                command = task['command']
                logging.info(f"Otrzymano zadanie ID {task['id']}: {command}")

                if command in ['request_update', 'request_uninstall']:
                    # Uruchom obsługę zadania interaktywnego w osobnym wątku,
                    # aby nie blokować głównej pętli agenta.
                    interactive_thread = threading.Thread(
                        target=self._handle_interactive_task,
                        args=(task,),
                        daemon=True # Wątek zostanie zabity, gdy główny program się zakończy
                    )
                    interactive_thread.start()
                    logging.info(f"Uruchomiono osobny wątek dla zadania interaktywnego ID {task['id']}.")
                elif command == 'force_report':
                    self.api_client.send_task_result(task['id'], 'w toku')
                    self.run_full_report()
                    self.api_client.send_task_result(task['id'], 'zakończone')
                else: # To są zadania "force" (update_package, uninstall_package)
                    self._perform_winget_action(task['id'], command, task['payload'])
        except Exception as e:
            logging.error(f"Błąd podczas przetwarzania zadań: {e}")

class AgentService(win32serviceutil.ServiceFramework):
    _svc_name_ = 'WingetDashboardAgent'
    _svc_display_name_ = 'Winget Dashboard Agent'
    _svc_description_ = 'Agent do zarządzania oprogramowaniem przez Winget Dashboard.'
    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)
        self.is_running = True
        self.agent = None

    def _setup_logging(self):
        log_dir = os.path.join(os.environ.get("ProgramData", "C:/"), "WingetAgent")
        os.makedirs(log_dir, exist_ok=True)
        logging.basicConfig(filename=os.path.join(log_dir, 'agent.log'), level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)
        self.is_running = False

    def SvcDoRun(self):
        self._setup_logging()
        servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE, servicemanager.PYS_SERVICE_STARTED, (self._svc_name_, ''))
        try:
            self.agent = Agent()
            self.main_loop()
        except Exception as e:
            logging.critical(f"Krytyczny błąd uniemożliwiający uruchomienie agenta: {e}", exc_info=True)
            self.SvcStop()

    def main_loop(self):
        logging.info("Uruchomiono główną pętlę agenta.")
        while self.is_running:
            rc = win32event.WaitForSingleObject(self.hWaitStop, LOOP_INTERVAL * 1000)
            if rc == win32event.WAIT_OBJECT_0:
                break
            try:
                self.agent.check_and_execute_tasks()
                if (time.time() - self.agent.last_report_time) >= REPORT_INTERVAL:
                    self.agent.run_full_report()
            except Exception as e:
                logging.error(f"Nieoczekiwany błąd w pętli: {e}")
                time.sleep(60)
        logging.info("Zakończono główną pętlę agenta.")

if __name__ == '__main__':
    if len(sys.argv) == 1:
        servicemanager.Initialize()
        servicemanager.PrepareToHostSingle(AgentService)
        servicemanager.StartServiceCtrlDispatcher()
    else:
        command = sys.argv[1].lower()
        if command == 'status':
            service_name = AgentService._svc_name_
            try:
                status_info = win32serviceutil.QueryServiceStatus(service_name)
                status_code = status_info[1]
                status_map = {
                    win32service.SERVICE_STOPPED: "Zatrzymana",
                    win32service.SERVICE_START_PENDING: "Uruchamianie...",
                    win32service.SERVICE_STOP_PENDING: "Zatzymywanie...",
                    win32service.SERVICE_RUNNING: "Uruchomiona",
                    win32service.SERVICE_CONTINUE_PENDING: "Wznawianie...",
                    win32service.SERVICE_PAUSE_PENDING: "Wstrzymywanie...",
                    win32service.SERVICE_PAUSED: "Wstrzymana",
                }
                status_text = status_map.get(status_code, f"Nieznany status (kod: {status_code})")
                print(f"Status usługi '{service_name}': {status_text}")
            except pywintypes.error as e:
                if e.winerror == 1060:
                    print(f"Usługa '{service_name}' nie jest zainstalowana.")
                else:
                    print(f"Błąd odpytywania o status usługi: {e}")
        else:
            try:
                win32serviceutil.HandleCommandLine(AgentService)
                if command == 'install': print(f"Usługa '{AgentService._svc_name_}' została pomyślnie zainstalowana.")
                elif command == 'start': print(f"Usługa '{AgentService._svc_name_}' została uruchomiona.")
                elif command == 'stop': print(f"Usługa '{AgentService._svc_name_}' została zatrzymana.")
                elif command == 'remove': print(f"Usługa '{AgentService._svc_name_}' została usunięta.")
            except pywintypes.error as e:
                print(f"Błąd operacji na usłudze: {e.args[1]} - {e.args[2]}")